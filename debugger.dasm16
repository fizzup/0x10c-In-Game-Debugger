; 0x10c IGD - An in-game debugger for 0x10c.
; Copyright (C) 2013  Michael Hamilton
; 
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

	set push,db_debug_this_code
        jsr debugger
        sub pc, 1

;
; Function that gets called at a break point.
; This vector has to be within the first 1f bytes of memory in order for the
; instruction "jsr break_point_vector" to be one word long. We need to use
; the jsr instruction so that it pushes the pc register on to the stack and the
; debugger can get back to the executed code. It needs to be one word long
; so that a construction like this
;
; ife a, b
; add a, 1
; add b, 2
;
; can be stepped into instruction by instruction. When the "if" instruction is
; going to be executed, both add a, 1 and add b, 1 need to be replaced by
; the breakpoint jsr code, so that code can only be one instruction long.
;
; The single-word instruction can replace a multi-word instruction without
; any loss of functionality, because the correct pc for the next breakpoint
; when single stepping can always be determined by examining the code at the
; current breakpoint once it's restored.
; 
; The only other special case is for an instruction like
;
; ifn a, b
; set [0x8000+a],[0x8000+b]
; set [0x8000+b], 0xf020
;
; If the "ifn a, b" is to be stepped into, the next two instructions have to
; be replaced by the breakpoint code, but the start of the second instruction
; has to be lined up with the jsr breakpoint code in order to get the right
; pc when the debugger is called, so it gets replaced like this
;
; ifn a, b
; jsr break_point_vector
; set a, a
; set a, a
; jsr break_point_vector
; dat 0x8000
; dat 0xf020
;
; This preserves the semantics of the "if" instruction, does not disturb the
; state of the processor (set a,a is a no-op instruction) and the second jsr
; is lined up with the start of the instruction that used to follow the if
; statement.
;
:break_point_vector
        set pc, db_break

;
; Function debugger()
;
:debugger
	set pc, db_debugger

;
; Safe storage for the next instruction. This is the code that was replaced
; by the jsr instruction for the break point
;
:db_ins_addr
	dat 0x0000
:db_ins_len
        dat 0x0000
:db_ins_store
	dat 0x0000, 0x0000, 0x0000, 0x0000

;
; In order to set a break point, the debugger replaces some of the program 
; code with instructions that return control back to the debugger. This is
; the code that returns control to the debugger. For a full description of
; how it works, see the comment at break_point_vector, above.
;
:db_break_jump
	jsr break_point_vector

; This is a stack that can be used by the debugger so as not to put values
; on the debugged program's stack. In fact, the debugged program does put
; a return address on the stack at a breakpoint, so there is some pollution
; of the debugged program's stack, but this is not avoidable.
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	dat 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
:db_debugger_stack

; The debugger shows the cpu registers, the stack, and several lines of
; disassembly on the screen. This memory location is a spot that preserves
; the debugged program's screen output while the debugger's screen is
; displayed.
:db_saved_screen
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	dat 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
:db_saved_screen_end

; This is the main layout of the debugger's screen. It's cheapest to have
; the entire screen defined here, and then have it copied into place, rather
; than have a bunch of individual db_puts calls. It would be faster still to
; include the mode in the definition, but it would be cumbersome to edit the
; layout.
:db_screen_layout
        dat "-CPU-------------STACK----------"
        dat "a:      x:     |                "
        dat "b:      y:     |                "
        dat "c:      z:     |                "
        dat "i:      o:     |                "
        dat "j:     pc:     |                "
        dat "-DISASSEMBLY--------------------"
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
        dat "    :                           "
:db_screen_layout_end

; This is a lookup tabble for the 15 basic opcodes. "ext" is for extended,
; and the code never references that location, because a test is made for
; ( instruction & 0xf ) == 0.
:db_basic_opcodes
        dat "extsetaddsubmuldivmodshlshrandborxorifeifnifgifb"

; This is a lookup table for the 31 extended opcodes. At the time of writing
; only one of the opcodes is defined (0x01 == jsr), but the disassembler
; correctly decodes operands for ??? undefined/reserved opcodes.
:db_extended_opcodes
        dat "???jsr??????????????????????????????????????????"
        dat "????????????????????????????????????????????????"

; This is a lookup table for the 32 possible operands. Any operand that
; involves "next word" does not use this table, but an entry is included to
; keep the rest of the possible opcodes in position. The db_puts function
; stops printing at the first zero, but the strings are zero padded so that
; each one is the same size.
:db_operands
        dat "a",0,0,0,0
        dat "b",0,0,0,0
        dat "c",0,0,0,0
        dat "x",0,0,0,0
        dat "y",0,0,0,0
        dat "z",0,0,0,0
        dat "i",0,0,0,0
        dat "j",0,0,0,0
        dat "[a]",0,0
        dat "[b]",0,0
        dat "[c]",0,0
        dat "[x]",0,0
        dat "[y]",0,0
        dat "[z]",0,0
        dat "[i]",0,0
        dat "[j]",0,0
        dat "+a]",0,0
        dat "+b]",0,0
        dat "+c]",0,0
        dat "+x]",0,0
        dat "+y]",0,0
        dat "+z]",0,0
        dat "+i]",0,0
        dat "+j]",0,0
        dat "pop",0,0
        dat "peek",0
        dat "push",0
        dat "sp",0,0,0
        dat "pc",0,0,0
        dat "o",0,0,0,0
        dat "[nx]",0
        dat "next",0
        dat "00",0,0,0
        dat "01",0,0,0
        dat "02",0,0,0
        dat "03",0,0,0
        dat "04",0,0,0
        dat "05",0,0,0
        dat "06",0,0,0
        dat "07",0,0,0
        dat "08",0,0,0
        dat "09",0,0,0
        dat "0a",0,0,0
        dat "0b",0,0,0
        dat "0c",0,0,0
        dat "0d",0,0,0
        dat "0e",0,0,0
        dat "0f",0,0,0
        dat "10",0,0,0
        dat "11",0,0,0
        dat "12",0,0,0
        dat "13",0,0,0
        dat "14",0,0,0
        dat "15",0,0,0
        dat "16",0,0,0
        dat "17",0,0,0
        dat "18",0,0,0
        dat "19",0,0,0
        dat "1a",0,0,0
        dat "1b",0,0,0
        dat "1c",0,0,0
        dat "1d",0,0,0
        dat "1e",0,0,0
        dat "1f",0,0,0

; This is the area of memory used to store all the register values from
; the debugged program.
:db_processor
:db_a	dat 0x0000
:db_b	dat 0x0000
:db_c	dat 0x0000
:db_x	dat 0x0000
:db_y	dat 0x0000
:db_z	dat 0x0000
:db_i	dat 0x0000
:db_j	dat 0x0000
:db_pc	dat 0x0000
:db_sp	dat 0x0000
:db_o	dat 0x0000

:db_saved_sp
	dat 0x0000

; This is a lookup table for converting a nibble to its hex character.
:db_hex dat "0123456789abcdef"

; This is the function that starts the debugger by calling a particular
; function. The function call semantics are
;
; db_debugger( target_function, ... )
;
; All arguments are pushed on the stack, last argument first.
;
; The first argument (target_function) is the function to call in the debugger.
; db_debugger returns the same registers in the same status as target_function.
;
; This is an example of how to use it:
;
; set a, 5
; set push,b
; set push,c
; jsr target_function
; add sp, 2
;
; can be replaced with
;
; set a, 5
; set push,b
; set push,c
; set push,target_function
; jsr db_debugger
; add sp, 2		; Not a typo. It should be "2" and not "3"
;
; This will cause the debugger to start running on "target_function". When
; operating systems on DCPU-16 become more sophisticated, the method of 
; running a program in the debugger will be made more betterer.
:db_debugger
        ; Set up the state of the cpu for the debugged program
	set [db_a], a
	set [db_b], b
	set [db_c], c
	set [db_x], x
	set [db_y], y
	set [db_z], z
	set [db_i], i
	set [db_j], j
	set [db_o], o
        set a, pop
	set b, pop
	set push, a
	set [db_pc], b
        set [db_sp], sp
	set [db_saved_sp], sp

        set sp, db_debugger_stack	; Preserve the main stack

        set a, [db_pc]			; Set the first break point at the
        set b, 1			; start of the function
        jsr db_set_break

	set a,[db_a]			; set up the processor to start the
	set b,[db_b]			; function that we're supposed to
	set c,[db_c]			; debug. We jump to the function
	set x,[db_x]			; rather than using jsr because
	set y,[db_y]			; the stack is now set up exactly
	set z,[db_z]			; as if this function had not been
	set i,[db_i]			; caled
	set j,[db_j]
	set o,[db_o]
	set sp,[db_sp]
	set pc,[db_pc]			; Must be the last thing!

:db_set_break; (a = break_addr, b=length)
        ifg b, 4			; see the comment at db_break_vector
        set b, 4			; for a description of all the possible
        set c, db_ins_store		; breakpoint code

        set [db_ins_addr], a		; remember the length and address
        set [db_ins_len], b		; of the breakpoint

        set [c], [a]			; save the code at the break point
        set [a], [db_break_jump]	; replace it with the jsr instruction

        sub b, 1
        ife b, 0
        set pc, db_set_break_exit

        add a, b			; for a breakpoint from stepping into
        add c, b			; an "if" statement, there can be
        set [c], [a]			; two possible destinations, so
        set [a], [db_break_jump]	; both of them need to be replaced.

        sub b, 1
        ife b, 0
        set pc, db_set_break_exit

        sub a, b
        sub c, b
        set [c], [a]
        set [a], 0x0001			; This is code for set a,a (no-op).

        sub b, 1
        ife b, 0
        set pc, db_set_break_exit

        add c, 1
        set [c], [a]
        set [a], 0x0001

:db_set_break_exit

	set pc, pop

:db_restore_breakpoint_code; ()
        ife [db_ins_len], 0
        set pc, pop

	set c, [db_ins_addr]		; restore the original code that
	set b, [db_ins_len]		; has been replaced for a breakpoint.
	set a, db_ins_store

:db_restore_breakpoint_loop
	set [c],[a]
	add a, 1
	add c, 1
	sub b, 1
	ifn b, 0
	set pc, db_restore_breakpoint_loop

        set [db_ins_addr], 0		; flag that no breakpoint is set.

	set pc, pop

;
; This is the function that is called when a breakpoint is reached in
; the debugged program. Since it's called with jsr, we can use the pc value
; pushed on the stack to figure out where the breakpoint was.
:db_break; ()
	; Save the processor state, including what pc should be. The pc is
	; always going to be one bigger than it ought to be, since the return
	; address from the function immediately follows the jsr, which is
	; one word long. When this function is called, the processor was
	; just about to execute the instruction that the jsr replaced.
	set [db_a],a
	set [db_b],b
	set [db_c],c
	set [db_x],x
	set [db_y],y
	set [db_z],z
	set [db_i],i
	set [db_j],j
	set [db_o],o
	set [db_pc],pop			; this is tied into the trickiness
	sub [db_pc],1			; at db_break_jump
	set [db_sp],sp

	set sp, db_debugger_stack	; prevent writing to the program stack

	; Restore the original code that was safe stored when we wrote in 
	; the break point.
	jsr db_restore_breakpoint_code

	; Update the on-screen display of the cpu
	jsr db_save_screen

:db_break_read_char
	jsr db_show_screen

	; wait for the user to type a command
	jsr db_getch
        set z, a

	jsr db_restore_screen		; restore the program's screen

        ife z, 0x71                     ; q == "quit"
	set pc, db_break_return

        ife z, 0x72                     ; r == "run"
        set pc, [db_pc]			; run without any breakpoints.

	ife z, 0x6e			; n == "next" (step over jsr)
	set pc, db_break_next_step

	ife z, 0x73			; s == "step" (step into jsr)
	set pc, db_break_next_step

	set pc, db_break_read_char

:db_break_return			; This is not the breakpoint
	set a,[db_a]			; returning control to the debugged
	set b,[db_b]			; program. This is the breakpoint
	set c,[db_c]			; pretending that the function has
	set x,[db_x]			; finished, and should return.
	set y,[db_y]
	set z,[db_z]
	set i,[db_i]
	set j,[db_j]
	set o,[db_o]
	set sp,[db_saved_sp]		; This unwinds the whole stack!
	set pc, pop

:db_break_next_step
	; Find the next instruction(s) and put in a break point
	set i, [db_pc]			; Is instruction IF, ??? pc, or JSR
	set a, [i]
	and a, 0x3ff
	ife a, 0x010			; JSR instruction
	set pc, db_break_jsr_opcode

	set a, [i]
	and a, 0xf			; Test the basic opcode
	ifg a, 0xb			; IFx instructions are 0xc - 0xf
	set pc, db_break_if_opcode

	set a, [i]
	shr a, 4
	and a, 0x3f
	ife a, 0x1c			; This instruction modifies pc
	set pc, db_break_pc_opcode

        set pc, db_break_normal_opcode

:db_break_if_opcode
	set a,[i]
	jsr db_instruction_length
	add a,i

	set push,a			; Save the start address
	set a,[a]
	jsr db_instruction_length
	set b,a

	add b,1
	set a, pop
	jsr db_set_break

	set pc, db_break_exit

:db_break_jsr_opcode
	ife z, 0x6e			; n == "next", treat jsr as a
	set pc, db_break_normal_opcode	; normal opcode: break right after it

	set a,[i]
	set b,[1+i]

	shr a, 10
	jsr db_operand_value
        set b,1
	jsr db_set_break

	set pc, db_break_exit

:db_break_pc_opcode
        set a, [i]
        shr a, 10
        ifn a, 0x18
        set pc, db_break_pc_not_final_pop

        ife [db_sp], [db_saved_sp]       ; If final pop, just let it return.
        set pc, db_break_exit

:db_break_pc_not_final_pop
	set a,[i]
	set b,[1+i]

	jsr db_pc_target
        set b,1
	jsr db_set_break

	set pc, db_break_exit

:db_break_normal_opcode
        set a,[i]
	jsr db_instruction_length
	add a,i
        set b,1
	jsr db_set_break

:db_break_exit

	; Restore the processor state and re-start execution
	set a,[db_a]
	set b,[db_b]
	set c,[db_c]
	set x,[db_x]
	set y,[db_y]
	set z,[db_z]
	set i,[db_i]
	set j,[db_j]
	set o,[db_o]
	set sp,[db_sp]
	;
	; This is a strange function, because it doesn't return control back
	; to the instruction that follows the jsr that activates it. Instead,
	; it modifies the code that calls it, and then returns control back
	; to the same program counter that called it.
	;
	set pc,[db_pc]			; Must be the last thing!

;
; Figure out the target program counter of an instruction that modifies
; PC (other than jsr, which is handled as a special case). Of the basic
; instructions, only the "if" instructions cannot modify pc. The semantics
; of some of the instructions modifying pc are weird, but since these
; instructions could be issued as a bug (and this is a debugger) all of the 
; cases need to be handled properly.
;
:db_pc_target; ( a = opcode, b = operand )
	set push, x
        set push, y
	set x, a

	shr a, 10
        jsr db_operand_value
        set y, a

        set a, x
        jsr db_instruction_length

	set a, [db_pc]

	set c, x
	and c, 0x0f;
	set pc, [db_pc_jump_table+c]

	; This jump table executes the correct code based on the
	; instruction type. Extended opcodes and if opcodes should not
	; be handled here, because they are handled specially in db_break.
:db_pc_jump_table
	dat db_pc_exit			; This should not happen
	dat db_pc_set
	dat db_pc_add
	dat db_pc_sub
	dat db_pc_mul
	dat db_pc_div
	dat db_pc_mod
	dat db_pc_shl
	dat db_pc_shr
	dat db_pc_and
	dat db_pc_bor
	dat db_pc_xor
	dat db_pc_if			; This should not happen
	dat db_pc_if
	dat db_pc_if
	dat db_pc_if

:db_pc_set
        set a, y
        set pc, db_pc_exit

:db_pc_add
	add a, y
	set pc, db_pc_exit
	
:db_pc_sub
        sub a, y
	set pc, db_pc_exit

:db_pc_mul
        mul a, y
	set pc, db_pc_exit

:db_pc_div
        div a, y
	set pc, db_pc_exit

:db_pc_mod
        mod a, y
	set pc, db_pc_exit

:db_pc_shl
        shl a, y
	set pc, db_pc_exit

:db_pc_shr
        shr a, y
	set pc, db_pc_exit

:db_pc_and
        shr a, y
	set pc, db_pc_exit

:db_pc_bor
        bor a, y
	set pc, db_pc_exit

:db_pc_xor
        bor a, y
	set pc, db_pc_exit

:db_pc_if				; This should never happen!

:db_pc_exit
        set y, pop
	set x, pop
	set pc, pop

:db_operand_value; (a = operand_type, b = operand_word )

	set pc, [db_operand_jump_table+a]
:db_operand_jump_table
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indirect_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_indexed_register
	dat db_operand_pop
	dat db_operand_peek
	dat db_operand_push
	dat db_operand_sp
	dat db_operand_pc
	dat db_operand_o
	dat db_operand_indirect_next_word
	dat db_operand_next_word
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal
	dat db_operand_small_literal

:db_operand_register
	set a, [db_processor+a]
	set pc, db_operand_exit

:db_operand_indirect_register
	sub a,0x08
	set c, [db_processor+a]
	set a, [c]
	set pc, db_operand_exit

:db_operand_indexed_register
	sub a, 0x10
	set c, [db_processor+a]
	add c, b
	set a, [c]
	set pc, db_operand_exit

:db_operand_pop
:db_operand_peek
	set a, [db_sp]
        set a, [a]
	set pc, db_operand_exit

:db_operand_push
	set c, [db_sp]
	sub c, 1
	set a, [c]
	set pc, db_operand_exit

:db_operand_sp
	set a, [db_sp]
	set pc, db_operand_exit
	
:db_operand_pc
	set a, [db_pc]
	add a, 1
	set pc, db_operand_exit

:db_operand_o
	set a, [db_o]
	set pc, db_operand_exit

:db_operand_indirect_next_word
	set a, [b]
	set pc, db_operand_exit

:db_operand_next_word
	set a, b
	set pc, db_operand_exit

:db_operand_small_literal
	sub a, 0x20
	set pc, db_operand_exit

:db_operand_exit
	set pc, pop

:db_instruction_length; ( a = opcode )
	set push, i

	set i,1

	set b,a
	shr b,4
	and b,0x3f
	ife b,0x1f			; If literal
	add i,1
	ifg 0x18,b			; If (b<0x18 &&
	ifg 0x10,b			;               b>=0x10 ||
	ife 0x1e,b			;			   b == 0x1e)
	add i,1

	set b,a
	shr b,10
	ife b,0x1f
	add i,1
	ifg 0x18,b
	ifg 0x10,b
	ife 0x1e,b
	add i,1

	set a,i

	set i, pop
	set pc, pop

;
; Print the register values of the cpu for the debugged program
;
:db_print_state

        set push, 0xf000
        set push, [db_a]
        set push, 2
        set push, 1
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_b]
        set push, 2
        set push, 2
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_c]
        set push, 2
        set push, 3
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_i]
        set push, 2
        set push, 4
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_j]
        set push, 2
        set push, 5
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_x]
        set push, 10
        set push, 1
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_y]
        set push, 10
        set push, 2
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_z]
        set push, 10
        set push, 3
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_o]
        set push, 10
        set push, 4
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, [db_pc]
        set push, 10
        set push, 5
        jsr db_print_value
        add sp, 4

        set pc, pop

;
; Print out the values in the stack for the debugged program
;
:db_print_stack
        set push, i
        set push, j

        set i, [db_sp]
        set j, 1

:db_print_stack_loop
        ife i, 0
        set pc, db_print_stack_exit
        ife j, 6
        set pc, db_print_stack_exit

        set push, 0xf000
        set push, i
        set push, 17
        set push, j
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, 0x3a
        set push, 21
        set push, j
        jsr db_putch
        add sp, 4

        set push, 0xf000
        set push, [i]
        set push, 22
        set push, j
        jsr db_print_value
        add sp, 4

        set push, 0xf000
        set push, 0x20
        set push, 26
        set push, j
        jsr db_putch
        add sp, 4

        add i, 1
        ife i, 0
        set pc, db_print_stack_exit

        set push, 0xf000
        set push, [i]
        set push, 27
        set push, j
        jsr db_print_value
        add sp, 4

        add j, 1
        add i, 1
        set pc, db_print_stack_loop

:db_print_stack_exit

        set j, pop
        set i, pop
        set pc, pop

;
; Print out several lines of disassembly starting with the instruction at db_pc
:db_disassemble
        set push, x
        set push, y
        set push, z
        set push, i
        set push, j

        set z, [db_pc]
        set j, 7

:db_disassemble_loop
        set i, 10
        set x, z

        ; Get the instruction part of the first word
        set a, z
        jsr db_get_instruction_word
        and a, 0x0f
        ife a, 0
        set pc, db_disassemble_extended_opcode
        mul a, 3
        add a, db_basic_opcodes

        ; print the opcode mnemonic
        set push, 0xf000
        set push, a
        set push, 3
        set push, i
        set push, j
        jsr db_puts
        add sp, 5
        add i, 4

        set a, x
        jsr db_get_instruction_word
        set b, a

        ; get the opcode again to figure out if we need to advance the
        ; next word pointer (b)
        set a, z
        jsr db_get_instruction_word
        shr a, 4
        and a, 0x3f
        ife a, 0x1f
        add x, 1
        ifg 0x18, a
        ifg 0x0f, a
        ife 0x1e, a
        add x, 1

        set push, [x]
        set push, a
        set push, i
        set push, j
        jsr db_print_operand
        add sp, 4
        add i, a

        set push, 0xf000
        set push, 0x2c
        set push, i
        set push, j
        jsr db_putch
        add sp, 4
        add i,1

        set a, z
        jsr db_get_instruction_word
        shr a, 10
        ife a, 0x1f
        add x, 1
        ifg 0x18, a
        ifg 0x0f, a
        ife 0x1e, a
        add x, 1

        set push, [x]
        set push, a
        set push, i
        set push, j
        jsr db_print_operand
        add sp, 4
        add i,a

        set pc, db_disassemble_memory_dump

:db_disassemble_extended_opcode
        set x, z

        set a, z
        jsr db_get_instruction_word
        shr a, 4
        and a, 0x3f
        mul a, 3
        add a, db_extended_opcodes

        set push, 0xf000
        set push, a
        set push, 3
        set push, i
        set push, j
        jsr db_puts
        add sp, 5
        add i,4

        set a, z
        jsr db_get_instruction_word
        shr a, 10
        ife a, 0x1f
        add x, 1
        ifg 0x18, a
        ifg 0x0f, a
        ife 0x1e, a
        add x, 1

        set push, [x]
        set push, a
        set push, i
        set push, j
        jsr db_print_operand
        add sp, 4
        add i,a

:db_disassemble_memory_dump
        ; After the instruction is printed, dump th memory for it
        set a, z
        jsr db_get_instruction_word
        jsr db_instruction_length

        set x, a

        ; Print out the instruction data.
:db_disassemble_memory_loop
        set i, 0

        ; Print out the memory address.
        set push, 0xf000
        set push, z
        set push, i
        set push, j
        jsr db_print_value
        add sp, 4
        add i, 5

        ; Print out the value at that address
        set push, 0xf000
        set a, z
        jsr db_get_instruction_word
        set push, a
        set push, i
        set push, j
        jsr db_print_value
        add sp, 4
        add i, 5

        add z, 1                         ; increment the instruction addr
        add y, 5                         ; increment the column
        sub x, 1                         ; dercrement the instruction counter
        add j, 1                         ; add a row
        ifg j, 0x0f
        set pc, db_disassemble_exit
        ifg x, 0
        set pc, db_disassemble_memory_loop

        ifg 0x10, j
        set pc, db_disassemble_loop


:db_disassemble_exit
        set j, pop
        set i, pop
        set z, pop
        set y, pop
        set z, pop
        set pc, pop

:db_get_instruction_word
        set a,[a]
        set pc,pop


:db_print_operand; (row, col, operand, next )
        set push, j
        set j, sp
        add j, 1
        set push, x

        set a, [3+j]

        ife a, 0x1f
        set pc, db_print_operand_immediate

        ifg 0x18, a
        ifg 0x0f, a
        ife 0x1e, a
        set pc, db_print_operand_indirect

        set pc, db_print_operand_static

:db_print_operand_indirect
        ifn 0x1e, a
        set pc, db_print_register_indirect

        set x, [2+j]

        set push, 0xf000
        set push, 0x5b
        set push, x
        set push, [1+j]
        jsr db_putch
        add sp, 4
        add x,1

        set push, 0xf000
        set push, [4+j]
        set push, x
        set push, [1+j]
        jsr db_print_value
        add sp, 4
        add x,4

        set push, 0xf000
        set push, 0x5d
        set push, i
        set push, [1+j]
        jsr db_putch
        add sp, 4
        add i,1

        set a, i
        sub a, [2+j]
        set pc, db_print_operand_exit

:db_print_register_indirect
        set x, [2+j]

        set push, 0xf000
        set push, 0x5b
        set push, x
        set push, [1+j]
        jsr db_putch
        add sp, 4
        add x,1

        set push, 0xf000
        set push, [4+j]
        set push, x
        set push, [1+j]
        jsr db_print_value
        add sp, 4
        add x,4

        set a, [3+j]
        mul a, 5
        add a, db_operands

        set push, 0xf000
        set push, a
        set push, 5
        set push, x
        set push, [1+j]
        jsr db_puts
        add sp, 5
        add a, x

        sub a, [2+j]
        set pc, db_print_operand_exit

:db_print_operand_immediate
        set push, 0xf000
        set push, [4+j]
        set push, [2+j]
        set push, [1+j]
        jsr db_print_value
        add sp, 4

        set a, 4
        set pc, db_print_operand_exit

:db_print_operand_static

        mul a, 5
        add a, db_operands

        set push, 0xf000
        set push, a
        set push, 5
        set push, [2+j]
        set push, [1+j]
        jsr db_puts
        add sp, 5

:db_print_operand_exit
        set x, pop
        set j, pop
        set pc, pop


:db_print_value; ( row, col, value, mode )
        set push, j
        set j, sp
        add j, 1

        set push, z
        set push, y

        set a, [1+j]
        mul a, 0x20
        add a, [2+j]

        set b, [3+j]
        set c, [4+j]

        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8003 + a], y

        shr b, 4
        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8002 + a], y

        shr b, 4
        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8001 + a], y

        shr b, 4
        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8000 + a], y

        set y, pop
        set z, pop
        set j, pop
        set pc, pop

:db_print_lo_byte; ( row, col, value, mode ) a = rowcol, b = value, c = text_mode )
        set push, j
        set j, sp
        add j, 1

        set push, z
        set push, y

        set a, [1+j]
        mul a, 0x20
        add a, [2+j]

        set b, [3+j]
        set c, [4+j]

        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8001 + a], y

        shr b, 4
        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8000 + a], y

        set y, pop
        set z, pop
        set j, pop
        set pc, pop

:db_print_hi_byte; ( row, col, value, mode ) a = rowcol, b = value, c = text_mode )
        set push, j
        set j, sp
        add j, 1

        set push, z
        set push, y

        set a, [1+j]
        mul a, 0x20
        add a, [2+j]

        set b, [3+j]
        set c, [4+j]

        shr b, 8

        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8001 + a], y

        shr b, 4
        set z, b
        and z, 0xf
        set y, [db_hex + z]
        bor y, c
        set [0x8000 + a], y

        set y, pop
        set z, pop
        set j, pop
        set pc, pop

:db_show_screen
        set push, x
        set push, y

        set a, sp
        set sp, db_screen_layout
        set b, 0x8000

:db_show_loop
        set x, pop
        bor x, 0xf000
        set [b], x

        set x, pop
        bor x, 0xf000
        set [1+b], x

        set x, pop
        bor x, 0xf000
        set [2+b], x

        set x, pop
        bor x, 0xf000
        set [3+b], x

        add b, 4

        ifg db_screen_layout_end, sp
        set pc, db_show_loop

        set sp, a

        jsr db_print_state
        jsr db_print_stack
        jsr db_disassemble

        set y, pop
        set x, pop
	set pc, pop

:db_save_screen
	set a, sp
	set sp, 0x8000
	set b, db_saved_screen

:db_save_loop
	set [b], pop
	set [1+b], pop
	set [2+b], pop
	set [3+b], pop
	set [4+b], pop
	set [5+b], pop
	set [6+b], pop
	set [7+b], pop

        add b, 8

	ifg 0x8200, sp
	set pc, db_save_loop

	set sp, a
	set pc, pop

:db_restore_screen
	set a, sp
	set b, 0x8000
	set sp, db_saved_screen

:db_restore_loop
	set [b], pop
	set [1+b], pop
	set [2+b], pop
	set [3+b], pop
	set [4+b], pop
	set [5+b], pop
	set [6+b], pop
	set [7+b], pop

        add b, 8

	ifg db_saved_screen_end, sp
	set pc, db_restore_loop

	set sp, a
	set pc, pop

:db_getch
        set a, [0x9000]
        ife a, 0
        set pc, db_getch
        set [0x9000], 0

        set pc, pop

:db_putch; (row, col, ch, mode)
        set push, j
        set j, sp
        add j, 1

        set a,[1+j]
        mul a,0x20
        add a,[2+j]
        bor [3+j],[4+j]

        set [0x8000+a],[3+j]

        set j, pop
        set pc, pop

:db_puts; (row, col, maxlen, *string, mode): length_written
        set push, j
        set j, sp
        add j, 1

        set push, i

        set a,[1+j]
        mul a,0x20
        add a,[2+j]

        set b,[4+j]

        set i,0

:db_puts_loop
        set c,[b]
        ife c, 0
        set pc, db_puts_break

        bor c,[5+j]
        set [0x8000+a],c

        add b,1
        add a,1
        add i,1
        ifg [3+j],i
        set pc, db_puts_loop

:db_puts_break
        set a, i

        set i, pop
        set j, pop
        set pc, pop

:db_restart
	set a, db_processor

	; reset the processor state
	set [a],0
	set [1+a],0
	set [2+a],0
	set [3+a],0
	set [4+a],0
	set [5+a],0
	set [6+a],0
	set [7+a],0
	set [8+a],0
	set [9+a],0

	; restore any outstanding code
        jsr db_restore_breakpoint_code

	set sp, 0			; Unwind the debugged program's stack
	set pc, db_debugger		; Start again.

:db_debug_this_code
        set a, 3
:sample_loop
        set a,a
        set push, a
        set b, pc
        set push, b
        sub a,1
        ifg a,0
        set pc, sample_loop

        jsr sample_subroutine

        add b, 0xa000
        set c, 0xbf33
        add b, c
        set [200+b],[201+b]
        add sp, 6
	set pc, pop

:sample_subroutine
        set pc, pop
